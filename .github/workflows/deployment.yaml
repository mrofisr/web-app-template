name: CI and CD Pipeline to Cloud Run

on:
  push:
    branches:
      - main
      - dev

  pull_request:
    branches:
      - main
      - dev
    types:
      - closed

jobs:
  build-and-deploy:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      # Step to checkout the code from the repository
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v4

      # Step to set environment variables
      - name: Set environment variables
        id: set-env
        run: |
          echo "IMAGE_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      # Step to authenticate with Google Cloud
      - name: Gcloud Auth
        id: gcloud-auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          project_id: ${{ secrets.PROJECT_ID }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}

      # Step to authenticate with the Google Container Registry
      - name: Auth Container Registry
        id: container-registry-auth
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcloud-auth.outputs.access_token }}

      # Step to build and push the Docker image for the backend
      - name: Build and push Docker image Backend
        id: build-push-back
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.back
          push: true
          tags: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/cloud-run/cloud-run-back:${{ env.IMAGE_VERSION }}

      # Step to deploy the backend Docker image to Cloud Run
      - name: Deploy to Cloud Run Backend
        id: deploy-cloud-run-back
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: cloud-run-backend-${{ env.IMAGE_VERSION }}
          image: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/cloud-run/cloud-run-back:${{ env.IMAGE_VERSION }}
          region: us-central1
          project_id: ${{ secrets.PROJECT_ID }}
          flags: --port 4000 --allow-unauthenticated

      # Step to update the NGINX configuration with the new backend URL
      - name: Change backend stream NGINX config
        run: |
          DOMAIN=$(echo ${{ steps.deploy-cloud-run-back.outputs.url }} | cut -d'/' -f3)
          sed -i 's|backend:4000|'${DOMAIN}'|g' ./nginx.conf
          sed -i 's|http://backend|https://'${DOMAIN}'|g' ./nginx.conf
          cat ./nginx.conf

      # Step to build and push the Docker image for the frontend
      - name: Build and push Docker image Frontend
        id: build-push-front
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.front
          push: true
          tags: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/cloud-run/cloud-run-front:${{ env.IMAGE_VERSION }}

      # Step to deploy the frontend Docker image to Cloud Run
      - name: Deploy to Cloud Run Frontend
        id: deploy-cloud-run-front
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: cloud-run-frontend-${{ env.IMAGE_VERSION }}
          image: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/cloud-run/cloud-run-front:${{ env.IMAGE_VERSION }}
          region: us-central1
          project_id: ${{ secrets.PROJECT_ID }}
          flags: --port 80 --allow-unauthenticated

      # Step to test if both backend and frontend are running correctly
      - name: Test Cloud Run
        run: |
          curl "${{ steps.deploy-cloud-run-back.outputs.url }}" -I -s | grep "HTTP/2 200"
          curl "${{ steps.deploy-cloud-run-front.outputs.url }}" -I -s | grep "HTTP/2 200"
